{"version":3,"file":"alarmsview.chunk.0.js","sources":["/plugin:alarmsview/plugins/alarmsview/public/application.tsx","/plugin:alarmsview/plugins/alarmsview/public/components/alarmeventstable.tsx","/plugin:alarmsview/plugins/alarmsview/public/components/alarmmodal.tsx","/plugin:alarmsview/plugins/alarmsview/public/components/alarmpage.tsx","/plugin:alarmsview/plugins/alarmsview/public/components/alarmrulestable.tsx","/plugin:alarmsview/plugins/alarmsview/public/components/alarmsgrid.tsx","/plugin:alarmsview/plugins/alarmsview/public/components/app.tsx","/plugin:alarmsview/plugins/alarmsview/public/components/confirmmodal.tsx"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { AlarmsviewApp } from './components/app';\nexport const renderApp = ({\n  notifications,\n  http\n}, {\n  navigation\n}, {\n  appBasePath,\n  element\n}) => {\n  ReactDOM.render( /*#__PURE__*/React.createElement(AlarmsviewApp, {\n    basename: appBasePath,\n    notifications: notifications,\n    http: http,\n    navigation: navigation\n  }), element);\n  return () => ReactDOM.unmountComponentAtNode(element);\n};","import React, { useEffect, useState } from 'react';\nimport { EuiBasicTable } from '@elastic/eui';\n;\n\nconst AlarmEventsTable = ({\n  alarmId,\n  stage,\n  es_index,\n  http\n}) => {\n  // console.log(\"Inside Events Component --- \", alarmId, stage, index);\n  const [eventsList, setEventList] = useState();\n  const [pageIndex, setPageIndex] = useState(0);\n  const [pageSize, setPageSize] = useState(5);\n  const [totalItemCount, setTotalItemCount] = useState(0);\n  const [showPerPageOptions, setShowPerPageOptions] = useState(true);\n  console.log(\"AlarmID - \", alarmId, \"stage - \", stage);\n  useEffect(() => {\n    loadEvents();\n  }, [alarmId, stage]);\n\n  const loadEvents = async () => {\n    if (!es_index) {\n      return;\n    }\n\n    const query = {\n      alarm_id: alarmId,\n      stage: stage,\n      es_index: es_index\n    };\n    await http.get('/api/alarmsview/alarmevents', {\n      query: query\n    }).then(async res => {\n      const events = await res.data.hits.hits;\n\n      if (events) {\n        setEventList(events);\n        setTotalItemCount(events.length);\n      }\n    });\n  };\n\n  const onTableChange = ({\n    page = {}\n  }) => {\n    const {\n      index: pageIndex,\n      size: pageSize\n    } = page;\n    setPageIndex(pageIndex);\n    setPageSize(pageSize);\n  };\n\n  let eventsTable = /*#__PURE__*/React.createElement(React.Fragment, null);\n\n  if (eventsList != null) {\n    const columns = [{\n      field: 'event_id',\n      name: 'Event ID',\n      width: '20%'\n    }, {\n      field: 'timestamp',\n      name: 'Timestamp',\n      width: '10%'\n    }, {\n      field: 'title',\n      name: 'Title',\n      width: '10%'\n    }, {\n      field: 'source',\n      name: 'Source',\n      truncateText: false,\n      width: '10%'\n    }, {\n      field: 'destination',\n      name: 'Destination',\n      width: '10%'\n    }, {\n      field: 'protocol',\n      name: 'Protocol'\n    }, {\n      field: 'port_from',\n      name: 'Port From',\n      truncateText: true\n    }, {\n      field: 'port_to',\n      name: 'Port To'\n    }, {\n      field: 'sensor',\n      name: 'Sensor'\n    }, {\n      field: 'plugin',\n      name: 'Plugin'\n    }, {\n      field: 'plugin_sid',\n      name: 'Plugin SID'\n    }];\n    const events = eventsList.map(event => {\n      return {\n        \"port_from\": event._source.src_port,\n        \"port_to\": event._source.dst_port,\n        \"event_id\": event._source.event_id,\n        \"timestamp\": event._source.timestamp,\n        \"title\": event._source.title,\n        \"source\": event._source.src_ip,\n        \"destination\": event._source.dst_ip,\n        \"protocol\": event._source.protocol,\n        \"sensor\": event._source.sensor,\n        \"plugin\": event._source.plugin_id,\n        \"plugin_sid\": event._source.plugin_sid\n      };\n    });\n    const pagination = {\n      pageIndex,\n      pageSize,\n      totalItemCount,\n      pageSizeOptions: [10, 50, 100],\n      hidePerPageOptions: !showPerPageOptions\n    };\n    eventsTable = /*#__PURE__*/React.createElement(EuiBasicTable, {\n      items: events,\n      columns: columns,\n      hasActions: false,\n      pagination: pagination,\n      onChange: onTableChange\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, eventsTable);\n};\n\nexport default AlarmEventsTable;","import React, { useState } from 'react';\nimport { EuiModal, EuiModalBody, EuiModalFooter, EuiButton, EuiBasicTable, EuiFlexGroup, EuiFlexItem, EuiSpacer, EuiPanel } from '@elastic/eui';\nimport AlarmRulesTable from './alarmrulestable';\nimport AlarmEventsTable from './alarmeventstable';\n\nconst AlarmsModal = ({\n  showModal,\n  alarmsData,\n  setShowModal,\n  http\n}) => {\n  const closeModal = () => {\n    setStage(0);\n    setShowModal(false);\n  };\n\n  const [alarmId, setAlarmId] = useState();\n  const [stage, setStage] = useState(0);\n  const [index, setIndex] = useState(null);\n  let modal = /*#__PURE__*/React.createElement(React.Fragment, null);\n\n  if (showModal) {\n    const columns = [{\n      field: 'Alarm_ID.formatted',\n      name: 'Alarm ID'\n    }, {\n      field: 'Created.formatted',\n      name: 'Created'\n    }, {\n      field: 'Updated.formatted',\n      name: 'Updated'\n    }, {\n      field: 'Status.formatted',\n      name: 'Status'\n    }, {\n      field: 'Risk.formatted',\n      name: 'Risk'\n    }, {\n      field: 'Tag.formatted',\n      name: 'Tag'\n    }, {\n      field: 'Sources.formatted',\n      name: 'Sources',\n      truncateText: false\n    }, {\n      field: 'Destinations.formatted',\n      name: 'Destinations',\n      truncateText: false\n    }];\n    const items = new Array(alarmsData);\n\n    const updateProps = (stage, index, alarmsId) => {\n      setAlarmId(alarmsId);\n      setStage(stage);\n      setIndex(index);\n    };\n\n    modal = /*#__PURE__*/React.createElement(EuiModal, {\n      onClose: closeModal,\n      initialFocus: \"[name=popswitch]\",\n      maxWidth: false\n    }, /*#__PURE__*/React.createElement(EuiModalBody, null, /*#__PURE__*/React.createElement(EuiFlexGroup, {\n      direction: \"column\"\n    }, /*#__PURE__*/React.createElement(EuiFlexItem, null, /*#__PURE__*/React.createElement(EuiPanel, null, /*#__PURE__*/React.createElement(\"p\", null, alarmId), /*#__PURE__*/React.createElement(EuiSpacer, null), /*#__PURE__*/React.createElement(EuiBasicTable, {\n      items: items,\n      columns: columns\n    }))), /*#__PURE__*/React.createElement(EuiSpacer, null), /*#__PURE__*/React.createElement(EuiFlexItem, null, /*#__PURE__*/React.createElement(EuiPanel, null, /*#__PURE__*/React.createElement(AlarmRulesTable, {\n      alarmId: alarmsData.Alarm_ID.formatted,\n      http: http,\n      updateProps: updateProps\n    })), /*#__PURE__*/React.createElement(EuiSpacer, null), /*#__PURE__*/React.createElement(EuiPanel, null, /*#__PURE__*/React.createElement(AlarmEventsTable, {\n      alarmId: alarmId,\n      stage: stage,\n      es_index: index,\n      http: http\n    }))))), /*#__PURE__*/React.createElement(EuiModalFooter, null, /*#__PURE__*/React.createElement(EuiButton, {\n      onClick: closeModal,\n      fill: true\n    }, \"Close\")));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", null, modal);\n};\n\nexport default AlarmsModal;","import React, { useState } from 'react';\nimport { EuiButton, EuiFlexGroup, EuiFlexItem, EuiSpacer } from '@elastic/eui';\nimport AlarmsGrid from './alarmsgrid';\nimport AlarmsModal from './alarmmodal';\nimport ConfirmModal from './confirmmodal';\n\nconst AlarmPage = ({\n  http\n}) => {\n  const [showModal, setShowModal] = useState(false);\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n  const [alarmsData, setAlarmsData] = useState();\n  const [deleteAlarmId, setDeleteAlarmId] = useState();\n  const [isAutoRefresh, setIsAutoRfresh] = useState(true);\n  const [autoRefreshMessage, setAutoRefreshMessageh] = useState(\"Turn-off auro-Refresh\"); // let autoRefreshMessage = \"Turn-off auro-Refresh\";\n\n  const setDelete = async isDelete => {\n    setShowConfirmModal(false);\n\n    if (isDelete) {\n      const query = {\n        alarm_id: deleteAlarmId\n      };\n      await http.delete('/api/alarmsview/alarms', {\n        query: query\n      }).then(async res => {\n        if (res.data === \"OK\") {// loadData();\n        }\n      });\n    }\n  };\n\n  const updateAutoRefresh = () => {\n    if (isAutoRefresh) {\n      setIsAutoRfresh(false);\n      setAutoRefreshMessageh(\"Turn-on auro-Refresh\");\n    } else {\n      setIsAutoRfresh(true);\n      setAutoRefreshMessageh(\"Turn-off auro-Refresh\");\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(EuiFlexGroup, {\n    gutterSize: \"s\",\n    alignItems: \"center\",\n    responsive: false,\n    wrap: true\n  }, /*#__PURE__*/React.createElement(EuiFlexItem, {\n    grow: false\n  }, /*#__PURE__*/React.createElement(EuiButton, {\n    size: \"s\",\n    fill: true,\n    onClick: () => {\n      updateAutoRefresh();\n    }\n  }, autoRefreshMessage))), /*#__PURE__*/React.createElement(EuiSpacer, null), /*#__PURE__*/React.createElement(ConfirmModal, {\n    showConfirmModal: showConfirmModal,\n    setDelete: setDelete,\n    alarmId: deleteAlarmId,\n    setShowConfirmModal: setShowConfirmModal\n  }), /*#__PURE__*/React.createElement(AlarmsModal, {\n    showModal: showModal,\n    alarmsData: alarmsData,\n    http: http,\n    setShowModal: setShowModal\n  }), /*#__PURE__*/React.createElement(AlarmsGrid, {\n    http: http,\n    setAlarmsData: setAlarmsData,\n    setDeleteAlarmId: setDeleteAlarmId,\n    setShowModal: setShowModal,\n    setShowConfirmModal: setShowConfirmModal,\n    isAutoRefresh: isAutoRefresh\n  }));\n};\n\nexport default AlarmPage;","import React, { useEffect, useState } from 'react';\nimport { EuiBasicTable } from '@elastic/eui';\nimport { Event } from 'jquery';\n;\n;\n\nconst AlarmRulesTable = ({\n  alarmId,\n  http,\n  updateProps\n}) => {\n  const [rulesList, setRulesList] = useState();\n  const [esIndex, setESIndex] = useState('');\n  const [eventsList, setEventList] = useState();\n  useEffect(() => {\n    loadRules();\n  }, [alarmId]);\n\n  const loadRules = async () => {\n    await http.get('/api/alarmsview/alarmrules', {\n      query: {\n        alarm_Id: alarmId\n      }\n    }).then(async res => {\n      const rulesData = await res.data.hits.hits;\n\n      if (rulesData) {\n        console.log(rulesData[0]._source.perm_index);\n        setESIndex(rulesData[0]._source.perm_index);\n        setRulesList(rulesData[0]._source.rules);\n      }\n    });\n  };\n\n  const loadEvents = async item => {\n    updateProps(item.stage, esIndex.split('-')[1], alarmId);\n  };\n\n  let ruleTable = /*#__PURE__*/React.createElement(React.Fragment, null);\n\n  if (rulesList != null) {\n    const columns = [{\n      name: 'Actions',\n      actions: [{\n        name: 'Events',\n        description: '',\n        type: 'icon',\n        icon: 'eye',\n        onClick: item => {\n          loadEvents(item);\n        }\n      }],\n      field: 'actions',\n      truncateText: false\n    }, {\n      field: 'stage',\n      name: 'Corr. Stage'\n    }, {\n      field: 'start_time',\n      name: 'started'\n    }, {\n      field: 'end_time',\n      name: 'Ended'\n    }, {\n      field: 'status',\n      name: 'Status'\n    }, {\n      field: 'name',\n      name: 'Name'\n    }, {\n      field: 'from',\n      name: 'From'\n    }, {\n      field: 'to',\n      name: 'To',\n      truncateText: false\n    }, {\n      field: 'protocol',\n      name: 'Protocol'\n    }, {\n      field: 'port_from',\n      name: 'Port From'\n    }, {\n      field: 'port_to',\n      name: 'Port To'\n    }, {\n      field: 'occurrence',\n      name: 'Events'\n    }];\n    const items = rulesList.map(rule => {\n      let start_time = rule.start_time ? new Date(rule.start_time).toLocaleString() : '-';\n      let end_time = rule.end_time ? new Date(rule.end_time).toLocaleString() : '-';\n      let status = rule.status ? rule.status : \"active\";\n      return {\n        \"port_from\": rule.port_from,\n        \"port_to\": rule.port_to,\n        \"to\": rule.to,\n        \"from\": rule.from,\n        \"start_time\": start_time,\n        \"end_time\": end_time,\n        \"protocol\": rule.protocol,\n        \"status\": status,\n        \"name\": rule.name,\n        \"stage\": rule.stage,\n        \"occurrence\": rule.occurrence\n      };\n    });\n    ruleTable = /*#__PURE__*/React.createElement(EuiBasicTable, {\n      items: items,\n      columns: columns,\n      hasActions: true\n    });\n  } // -------------------------------- This should go to a new eventsTable componant-------------------------\n\n\n  let eventsTable = /*#__PURE__*/React.createElement(React.Fragment, null);\n\n  if (eventsList != null) {\n    const columns = [{\n      field: 'event_id',\n      name: 'Event ID',\n      width: '20%'\n    }, {\n      field: 'timestamp',\n      name: 'Timestamp',\n      width: '10%'\n    }, {\n      field: 'title',\n      name: 'Title',\n      width: '10%'\n    }, {\n      field: 'source',\n      name: 'Source',\n      truncateText: false,\n      fullwidth: true,\n      width: '10%'\n    }, {\n      field: 'destination',\n      name: 'Destination',\n      width: '10%'\n    }, {\n      field: 'protocol',\n      name: 'Protocol'\n    }, {\n      field: 'port_from',\n      name: 'Port From',\n      truncateText: true\n    }, {\n      field: 'port_to',\n      name: 'Port To'\n    }, {\n      field: 'sensor',\n      name: 'Sensor'\n    }, {\n      field: 'plugin',\n      name: 'Plugin'\n    }, {\n      field: 'plugin_sid',\n      name: 'Plugin SID'\n    }];\n    const events = eventsList.map(event => {\n      return {\n        \"port_from\": event._source.src_port,\n        \"port_to\": event._source.dst_port,\n        \"event_id\": event._source.event_id,\n        \"timestamp\": event._source.timestamp,\n        \"title\": event._source.title,\n        \"source\": event._source.src_ip,\n        \"destination\": event._source.dst_ip,\n        \"protocol\": event._source.protocol,\n        \"sensor\": event._source.sensor,\n        \"plugin\": event._source.plugin_id,\n        \"plugin_sid\": event._source.plugin_sid\n      };\n    });\n    eventsTable = /*#__PURE__*/React.createElement(EuiBasicTable, {\n      items: events,\n      columns: columns,\n      hasActions: false\n    });\n  } // -------------------------------------End Events Table--------------\n\n\n  return /*#__PURE__*/React.createElement(\"div\", null, ruleTable);\n};\n\nexport default AlarmRulesTable;","import React, { useCallback, useEffect, useMemo, useState, createContext, useContext } from 'react';\nimport { EuiDataGrid, EuiButtonIcon } from '@elastic/eui';\nconst columns = [{\n  id: 'Alarm_ID',\n  displayAsText: 'Alarm ID'\n}, {\n  id: 'Title',\n  displayAsText: 'Title',\n  initiaWidth: 130\n}, {\n  id: 'Created',\n  displayAsText: 'Created',\n  defaulltSortDirection: 'dsc'\n}, {\n  id: 'Updated',\n  displayAsText: 'Updated'\n}, {\n  id: 'Status',\n  displayAsText: 'Status'\n}, {\n  id: 'Risk',\n  displayAsText: 'Risk'\n}, {\n  id: 'Tag',\n  displayAsText: 'Tag'\n}, {\n  id: 'Sources',\n  displayAsText: 'Sources'\n}, {\n  id: 'Destinations',\n  displayAsText: 'Destinations'\n}];\n\nconst AlarmsGrid = ({\n  http,\n  isAutoRefresh,\n  setAlarmsData,\n  setDeleteAlarmId,\n  setShowModal,\n  setShowConfirmModal\n}) => {\n  const [pagination, setPagination] = useState({\n    pageIndex: 0,\n    pageSize: 10\n  });\n  const [raw_data, setRawData] = useState([]);\n  const [rowIndex, setRowIndex] = useState(0);\n  const [visibleColumns, setVisibleColumns] = useState(() => columns.map(({\n    id\n  }) => id)); // initialize to the full set of columns\n\n  useEffect(() => {\n    const id = setInterval(() => {\n      if (isAutoRefresh) {\n        loadData();\n      }\n    }, 10000);\n    return () => clearInterval(id);\n  }, [isAutoRefresh]);\n  const DataContext = /*#__PURE__*/createContext(raw_data);\n\n  const loadData = async () => {\n    const _raw_data = [];\n    await http.get('/api/alarmsview/alarms').then(async res => {\n      const init_data = await res.data.hits.hits;\n\n      for (let i = 0; i < init_data.length; i++) {\n        const _source = init_data[i]._source;\n        const alarmId = _source.alarm_id;\n        const title = _source.title;\n        const timestamp = _source.timestamp;\n        const updatedTimestamp = _source.updated_time;\n        const status = _source.status;\n        const risk = _source.risk_class;\n        const tag = _source.tag;\n\n        const sources = _source.src_ips.join(',');\n\n        const destinations = _source.dst_ips;\n\n        _raw_data.push({\n          Alarm_ID: {\n            formatted: `${alarmId}`,\n            raw: alarmId\n          },\n          Title: {\n            formatted: `${title}`,\n            raw: title\n          },\n          Created: {\n            formatted: `${timestamp}`,\n            raw: timestamp\n          },\n          Updated: {\n            formatted: `${updatedTimestamp}`,\n            raw: updatedTimestamp\n          },\n          Status: {\n            formatted: `${status}`,\n            raw: status\n          },\n          Risk: {\n            formatted: `${risk}`,\n            raw: risk\n          },\n          Tag: {\n            formatted: `${tag}`,\n            raw: tag\n          },\n          Sources: {\n            formatted: `${sources}`,\n            raw: sources\n          },\n          Destinations: {\n            formatted: `${destinations}`,\n            raw: destinations\n          }\n        });\n      }\n    });\n    setRawData(_raw_data);\n  };\n\n  const trailingControlColumns = [{\n    id: 'actions',\n    name: 'Actoions',\n    width: 40,\n    headerCellRender: () => null,\n    rowCellRender: function RowCellRender({\n      rowIndex\n    }) {\n      return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(EuiButtonIcon, {\n        \"aria-label\": \"show actions\",\n        iconType: \"eye\",\n        color: \"text\",\n        onClick: () => {\n          onShowAlarmDetail(rowIndex);\n        }\n      }), /*#__PURE__*/React.createElement(EuiButtonIcon, {\n        \"aria-label\": \"show actions\",\n        iconType: \"trash\",\n        color: \"text\",\n        onClick: () => {\n          onDeleteAlarm(rowIndex);\n        }\n      }));\n    }\n  }];\n\n  const onDeleteAlarm = async rowIndex => {\n    setRowIndex(rowIndex);\n    setDeleteAlarmId(raw_data[rowIndex].Alarm_ID.formatted);\n    setShowConfirmModal(true);\n  };\n\n  const onShowAlarmDetail = rowIndex => {\n    setAlarmsData(raw_data[rowIndex]);\n    setShowModal(true);\n  };\n\n  const onChangeItemsPerPage = useCallback(pageSize => setPagination(pagination => ({ ...pagination,\n    pageSize,\n    pageIndex: 0\n  })), [setPagination]);\n  const onChangePage = useCallback(pageIndex => setPagination(pagination => ({ ...pagination,\n    pageIndex\n  })), [setPagination]);\n  const renderCellValue = useMemo(() => {\n    return ({\n      rowIndex,\n      columnId\n    }) => {\n      const data = useContext(DataContext);\n\n      function getFormatted(rowIndex, columnId) {\n        // console.log(`rowIndex - ${rowIndex} / columnId - ${columnId} / data - ${data[rowIndex][columnId].formatted}`)\n        return data[rowIndex][columnId].formatted;\n      }\n\n      return data.hasOwnProperty(rowIndex) ? getFormatted(rowIndex, columnId) : null;\n    };\n  }, [raw_data]);\n  return /*#__PURE__*/React.createElement(DataContext.Provider, {\n    value: raw_data\n  }, /*#__PURE__*/React.createElement(EuiDataGrid, {\n    \"aria-label\": \"alarmsView\",\n    columns: columns,\n    columnVisibility: {\n      visibleColumns,\n      setVisibleColumns\n    },\n    trailingControlColumns: trailingControlColumns,\n    rowCount: raw_data.length,\n    renderCellValue: renderCellValue,\n    inMemory: {\n      level: 'sorting'\n    },\n    pagination: { ...pagination,\n      pageSizeOptions: [10, 50, 100],\n      onChangeItemsPerPage: onChangeItemsPerPage,\n      onChangePage: onChangePage\n    }\n  }));\n};\n\nexport default AlarmsGrid;","import React from 'react';\nimport { FormattedMessage, I18nProvider } from '@kbn/i18n/react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport AlarmPage from './alarmpage';\nimport { EuiPage, EuiPageBody, EuiPageContent, EuiPageContentBody, EuiPageHeader, EuiTitle } from '@elastic/eui';\nimport { PLUGIN_ID, PLUGIN_NAME } from '../../common';\nexport const AlarmsviewApp = ({\n  basename,\n  notifications,\n  http,\n  navigation\n}) => {\n  // Render the application DOM.\n  // Note that `navigation.ui.TopNavMenu` is a stateful component exported on the `navigation` plugin's start contract.\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename\n  }, /*#__PURE__*/React.createElement(I18nProvider, null, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(navigation.ui.TopNavMenu, {\n    appName: PLUGIN_ID,\n    showSearchBar: false,\n    useDefaultBehaviors: true\n  }), /*#__PURE__*/React.createElement(EuiPage, {\n    restrictWidth: \"1300px\"\n  }, /*#__PURE__*/React.createElement(EuiPageBody, null, /*#__PURE__*/React.createElement(EuiPageHeader, null, /*#__PURE__*/React.createElement(EuiTitle, {\n    size: \"l\"\n  }, /*#__PURE__*/React.createElement(\"h1\", null, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"alarmsview.helloWorldText\",\n    defaultMessage: \"{name}\",\n    values: {\n      name: PLUGIN_NAME\n    }\n  })))), /*#__PURE__*/React.createElement(EuiPageContent, null, /*#__PURE__*/React.createElement(EuiPageContentBody, null, /*#__PURE__*/React.createElement(AlarmPage, {\n    http: http\n  }))))))));\n};","import React from 'react';\nimport { EuiConfirmModal } from '@elastic/eui';\n\nconst ConfirmModal = ({\n  showConfirmModal,\n  alarmId,\n  setDelete,\n  setShowConfirmModal\n}) => {\n  const closeConfirmLoadingModal = isDelete => {\n    setDelete(isDelete);\n    setShowConfirmModal(false);\n  };\n\n  let confirmLoadingModal;\n\n  if (showConfirmModal) {\n    confirmLoadingModal = /*#__PURE__*/React.createElement(EuiConfirmModal, {\n      title: \"Delete Alarm !\",\n      onCancel: () => closeConfirmLoadingModal(false),\n      onConfirm: () => closeConfirmLoadingModal(true),\n      cancelButtonText: \"No, don't do it\",\n      confirmButtonText: \"Delete\",\n      buttonColor: \"danger\",\n      defaultFocusedButton: \"cancel\"\n    }, /*#__PURE__*/React.createElement(\"p\", null, \"You\\u2019re about to delete : \", /*#__PURE__*/React.createElement(\"strong\", null, \" \", alarmId, \" \"), \".\"), /*#__PURE__*/React.createElement(\"p\", null, \"Are you sure you want to do this?\"));\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, confirmLoadingModal);\n};\n\nexport default ConfirmModal;"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACpIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACpFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC3EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC1LA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC7MA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACjCA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}